package com.kh.test.break_continue;

import java.util.Scanner;

public class Test3 {

	public static void main(String[] args) {
		
		Test3 t = new Test3();
		t.test();

	}
	
/**
	  [문제 3]
		- 클래스 : com.kh.test.break_continue.Test3.java
		- 메소드명 : public void test()
   
     	2보다 큰 정수를 입력 받고, 입력 받은 정수가 소수이면 “소수다“, 
     	소수가 아니면 “소수가 아니다.” 출력하고 프로그램을 종료하는 코드를 작성하세요.
     	단, 입력 받은 정수가 2보다 작은 경우 
     	“잘못 입력하셨습니다. 다시 입력하세요.” 출력 후 다시 정수를 입력 받도록 하세요.

		소수란? : 어떠한 정수를 1부터 자기 자신까지로 나누었을 때, 
		나누어 떨어지는 수가 1과 자기 자신 뿐인 수를 소수라고 한다.

*/

	public void test() {
		
		/*
		 * 1) 2보다 큰 정수를 사용자로부터 입력받는다. (2보다 작은 수라면 다시 입력하라고 출력 후 다시 입력받기 *우선순위)
		 * 2) 소수는 자기 자신까지 나누어야 하므로 그 소수를 판단하는 블럭은 별개
		 * 3) 소수이든 아니든 출력문이 필요함
		 * 4) 소수의 나머지는 0이다! 자기 자신과 1로만 나누어지니까!
		 *
		 */
		Scanner sc = new Scanner(System.in);
		System.out.print("2보다 큰 정수를 입력하세요.> ");
		int x = sc.nextInt();
		
		int i = 2; //소수를 판별하는 비교값, 2보다 커야 하므로 2로 지정
		
		if(x <= 2) {
			System.out.println("잘못 입력하셨습니다. 다시 입력하세요."); //가장 먼저 2보다 작은지를 판별한다. 부합한다면 return;
			return;
		}
		
		while(x % i != 0) { //사용자로부터 입력받은 수를 i로 나누는 동안 i의 값은 계속 증가해야 함
			
			/*
			 * x를 i로 나눈 나머지가 0이 아니라면 소수가 아니다
			 * 소수 3을 예로 들자면, 3은 1과 3자신으로만 나눠지므로 소수이다.
			 * 
			 */
			
			i++; // 계속 i값이 더해져야 x의 값과 연산하여 소수 여부를 판단할 수 있다.
			
//			System.out.println(x + "/" + i); // 중간 과정을 확인하기 위한 임시 출력값
			}
		
				if(i == x) {	//i의 값이 x와 같아지면 사용자가
					System.out.printf("소수다.");
				}
				else {
					System.out.printf("소수가 아니다.");
				}
			
			/* 사용자가 7을 입력했다고 했을 때
			 * 1턴 : x=7, i=2이고 x % 2 = 0이 아니므로 while조건 만족, i++; i=3이 되었다.
			 * 2턴 : x=7, i=3이고 x % 2 = 0이 아니므로 while조건 만족, i++; i=4가 되었다.
			 * 3턴 : x=7, i=4이고 x % 2 = 0이 아니므로 while조건 만족, i++; i=5가 되었다.
			 * 4턴 : x=7, i=5이고 x % 2 = 0이 아니므로 while조건 만족, i++; i=6이 되었다.
			 * 5턴 : x=7, i=6이고 x % 2 = 0이 아니므로 while조건 만족, i++; i=7이 되었다.
			 * 6턴 : x=7, i=7이고 x % 2 = 0이 되었으므로 while조건 충족, while문 안에 들어간 i++;는 동작하지 않는다.
			 * 
			 * -> if문에 속해있는 i==x의 값이 충족되어 "소수다."출력
			 * -> else는 이외의 경우 "소수가 아니다."를 출력해야 하므로 필요하다.
			 * 
			 */
	}
}
